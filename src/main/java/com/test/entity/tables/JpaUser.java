/*
 * This file is generated by jOOQ.
 */
package com.test.entity.tables;


import com.test.entity.Indexes;
import com.test.entity.Keys;
import com.test.entity.Test;
import com.test.entity.tables.records.JpaUserRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JpaUser extends TableImpl<JpaUserRecord> {

    private static final long serialVersionUID = -219416146;

    /**
     * The reference instance of <code>test.jpa_user</code>
     */
    public static final JpaUser JPA_USER = new JpaUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JpaUserRecord> getRecordType() {
        return JpaUserRecord.class;
    }

    /**
     * The column <code>test.jpa_user.id</code>.
     */
    public final TableField<JpaUserRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>test.jpa_user.user_mobile</code>.
     */
    public final TableField<JpaUserRecord, String> USER_MOBILE = createField(DSL.name("user_mobile"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>test.jpa_user.user_name</code>.
     */
    public final TableField<JpaUserRecord, String> USER_NAME = createField(DSL.name("user_name"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>test.jpa_user</code> table reference
     */
    public JpaUser() {
        this(DSL.name("jpa_user"), null);
    }

    /**
     * Create an aliased <code>test.jpa_user</code> table reference
     */
    public JpaUser(String alias) {
        this(DSL.name(alias), JPA_USER);
    }

    /**
     * Create an aliased <code>test.jpa_user</code> table reference
     */
    public JpaUser(Name alias) {
        this(alias, JPA_USER);
    }

    private JpaUser(Name alias, Table<JpaUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private JpaUser(Name alias, Table<JpaUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> JpaUser(Table<O> child, ForeignKey<O, JpaUserRecord> key) {
        super(child, key, JPA_USER);
    }

    @Override
    public Schema getSchema() {
        return Test.TEST;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.JPA_USER_PRIMARY);
    }

    @Override
    public Identity<JpaUserRecord, Long> getIdentity() {
        return Keys.IDENTITY_JPA_USER;
    }

    @Override
    public UniqueKey<JpaUserRecord> getPrimaryKey() {
        return Keys.KEY_JPA_USER_PRIMARY;
    }

    @Override
    public List<UniqueKey<JpaUserRecord>> getKeys() {
        return Arrays.<UniqueKey<JpaUserRecord>>asList(Keys.KEY_JPA_USER_PRIMARY);
    }

    @Override
    public JpaUser as(String alias) {
        return new JpaUser(DSL.name(alias), this);
    }

    @Override
    public JpaUser as(Name alias) {
        return new JpaUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JpaUser rename(String name) {
        return new JpaUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JpaUser rename(Name name) {
        return new JpaUser(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
