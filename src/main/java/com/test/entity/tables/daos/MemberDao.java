/*
 * This file is generated by jOOQ.
 */
package com.test.entity.tables.daos;


import com.test.entity.tables.Member;
import com.test.entity.tables.records.MemberRecord;

import java.time.LocalDateTime;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MemberDao extends DAOImpl<MemberRecord, com.test.entity.tables.pojos.Member, Integer> {

    /**
     * Create a new MemberDao without any configuration
     */
    public MemberDao() {
        super(Member.MEMBER, com.test.entity.tables.pojos.Member.class);
    }

    /**
     * Create a new MemberDao with an attached configuration
     */
    public MemberDao(Configuration configuration) {
        super(Member.MEMBER, com.test.entity.tables.pojos.Member.class, configuration);
    }

    @Override
    public Integer getId(com.test.entity.tables.pojos.Member object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.test.entity.tables.pojos.Member> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Member.MEMBER.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.test.entity.tables.pojos.Member> fetchById(Integer... values) {
        return fetch(Member.MEMBER.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.test.entity.tables.pojos.Member fetchOneById(Integer value) {
        return fetchOne(Member.MEMBER.ID, value);
    }

    /**
     * Fetch records that have <code>regName BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.test.entity.tables.pojos.Member> fetchRangeOfRegname(String lowerInclusive, String upperInclusive) {
        return fetchRange(Member.MEMBER.REGNAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>regName IN (values)</code>
     */
    public List<com.test.entity.tables.pojos.Member> fetchByRegname(String... values) {
        return fetch(Member.MEMBER.REGNAME, values);
    }

    /**
     * Fetch records that have <code>pwd BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.test.entity.tables.pojos.Member> fetchRangeOfPwd(String lowerInclusive, String upperInclusive) {
        return fetchRange(Member.MEMBER.PWD, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>pwd IN (values)</code>
     */
    public List<com.test.entity.tables.pojos.Member> fetchByPwd(String... values) {
        return fetch(Member.MEMBER.PWD, values);
    }

    /**
     * Fetch records that have <code>mobilephone BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.test.entity.tables.pojos.Member> fetchRangeOfMobilephone(String lowerInclusive, String upperInclusive) {
        return fetchRange(Member.MEMBER.MOBILEPHONE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>mobilephone IN (values)</code>
     */
    public List<com.test.entity.tables.pojos.Member> fetchByMobilephone(String... values) {
        return fetch(Member.MEMBER.MOBILEPHONE, values);
    }

    /**
     * Fetch records that have <code>type BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.test.entity.tables.pojos.Member> fetchRangeOfType(Byte lowerInclusive, Byte upperInclusive) {
        return fetchRange(Member.MEMBER.TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>type IN (values)</code>
     */
    public List<com.test.entity.tables.pojos.Member> fetchByType(Byte... values) {
        return fetch(Member.MEMBER.TYPE, values);
    }

    /**
     * Fetch records that have <code>leaveAmount BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.test.entity.tables.pojos.Member> fetchRangeOfLeaveamount(Double lowerInclusive, Double upperInclusive) {
        return fetchRange(Member.MEMBER.LEAVEAMOUNT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>leaveAmount IN (values)</code>
     */
    public List<com.test.entity.tables.pojos.Member> fetchByLeaveamount(Double... values) {
        return fetch(Member.MEMBER.LEAVEAMOUNT, values);
    }

    /**
     * Fetch records that have <code>regTime BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.test.entity.tables.pojos.Member> fetchRangeOfRegtime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Member.MEMBER.REGTIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>regTime IN (values)</code>
     */
    public List<com.test.entity.tables.pojos.Member> fetchByRegtime(LocalDateTime... values) {
        return fetch(Member.MEMBER.REGTIME, values);
    }
}
