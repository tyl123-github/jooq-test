/*
 * This file is generated by jOOQ.
 */
package com.test.entity.tables.daos;


import com.test.entity.tables.SysUser;
import com.test.entity.tables.records.SysUserRecord;

import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * 系统用户表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SysUserDao extends DAOImpl<SysUserRecord, com.test.entity.tables.pojos.SysUser, Long> {

    /**
     * Create a new SysUserDao without any configuration
     */
    public SysUserDao() {
        super(SysUser.SYS_USER, com.test.entity.tables.pojos.SysUser.class);
    }

    /**
     * Create a new SysUserDao with an attached configuration
     */
    public SysUserDao(Configuration configuration) {
        super(SysUser.SYS_USER, com.test.entity.tables.pojos.SysUser.class, configuration);
    }

    @Override
    public Long getId(com.test.entity.tables.pojos.SysUser object) {
        return object.getUserId();
    }

    /**
     * Fetch records that have <code>user_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.test.entity.tables.pojos.SysUser> fetchRangeOfUserId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(SysUser.SYS_USER.USER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_id IN (values)</code>
     */
    public List<com.test.entity.tables.pojos.SysUser> fetchByUserId(Long... values) {
        return fetch(SysUser.SYS_USER.USER_ID, values);
    }

    /**
     * Fetch a unique record that has <code>user_id = value</code>
     */
    public com.test.entity.tables.pojos.SysUser fetchOneByUserId(Long value) {
        return fetchOne(SysUser.SYS_USER.USER_ID, value);
    }

    /**
     * Fetch records that have <code>username BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.test.entity.tables.pojos.SysUser> fetchRangeOfUsername(String lowerInclusive, String upperInclusive) {
        return fetchRange(SysUser.SYS_USER.USERNAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>username IN (values)</code>
     */
    public List<com.test.entity.tables.pojos.SysUser> fetchByUsername(String... values) {
        return fetch(SysUser.SYS_USER.USERNAME, values);
    }

    /**
     * Fetch records that have <code>password BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.test.entity.tables.pojos.SysUser> fetchRangeOfPassword(String lowerInclusive, String upperInclusive) {
        return fetchRange(SysUser.SYS_USER.PASSWORD, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>password IN (values)</code>
     */
    public List<com.test.entity.tables.pojos.SysUser> fetchByPassword(String... values) {
        return fetch(SysUser.SYS_USER.PASSWORD, values);
    }

    /**
     * Fetch records that have <code>salt BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.test.entity.tables.pojos.SysUser> fetchRangeOfSalt(String lowerInclusive, String upperInclusive) {
        return fetchRange(SysUser.SYS_USER.SALT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>salt IN (values)</code>
     */
    public List<com.test.entity.tables.pojos.SysUser> fetchBySalt(String... values) {
        return fetch(SysUser.SYS_USER.SALT, values);
    }

    /**
     * Fetch records that have <code>state BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.test.entity.tables.pojos.SysUser> fetchRangeOfState(String lowerInclusive, String upperInclusive) {
        return fetchRange(SysUser.SYS_USER.STATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>state IN (values)</code>
     */
    public List<com.test.entity.tables.pojos.SysUser> fetchByState(String... values) {
        return fetch(SysUser.SYS_USER.STATE, values);
    }
}
