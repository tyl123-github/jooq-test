/*
 * This file is generated by jOOQ.
 */
package com.test.entity.tables;


import com.test.entity.Indexes;
import com.test.entity.Keys;
import com.test.entity.Test;
import com.test.entity.tables.records.MemberRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Member extends TableImpl<MemberRecord> {

    private static final long serialVersionUID = -1827652515;

    /**
     * The reference instance of <code>test.member</code>
     */
    public static final Member MEMBER = new Member();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MemberRecord> getRecordType() {
        return MemberRecord.class;
    }

    /**
     * The column <code>test.member.id</code>.
     */
    public final TableField<MemberRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>test.member.regName</code>.
     */
    public final TableField<MemberRecord, String> REGNAME = createField(DSL.name("regName"), org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>test.member.pwd</code>.
     */
    public final TableField<MemberRecord, String> PWD = createField(DSL.name("pwd"), org.jooq.impl.SQLDataType.VARCHAR(16), this, "");

    /**
     * The column <code>test.member.mobilephone</code>.
     */
    public final TableField<MemberRecord, String> MOBILEPHONE = createField(DSL.name("mobilephone"), org.jooq.impl.SQLDataType.CHAR(11), this, "");

    /**
     * The column <code>test.member.type</code>.
     */
    public final TableField<MemberRecord, Byte> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.TINYINT, this, "");

    /**
     * The column <code>test.member.leaveAmount</code>.
     */
    public final TableField<MemberRecord, Double> LEAVEAMOUNT = createField(DSL.name("leaveAmount"), org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>test.member.regTime</code>.
     */
    public final TableField<MemberRecord, LocalDateTime> REGTIME = createField(DSL.name("regTime"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * Create a <code>test.member</code> table reference
     */
    public Member() {
        this(DSL.name("member"), null);
    }

    /**
     * Create an aliased <code>test.member</code> table reference
     */
    public Member(String alias) {
        this(DSL.name(alias), MEMBER);
    }

    /**
     * Create an aliased <code>test.member</code> table reference
     */
    public Member(Name alias) {
        this(alias, MEMBER);
    }

    private Member(Name alias, Table<MemberRecord> aliased) {
        this(alias, aliased, null);
    }

    private Member(Name alias, Table<MemberRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Member(Table<O> child, ForeignKey<O, MemberRecord> key) {
        super(child, key, MEMBER);
    }

    @Override
    public Schema getSchema() {
        return Test.TEST;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MEMBER_PRIMARY);
    }

    @Override
    public Identity<MemberRecord, Integer> getIdentity() {
        return Keys.IDENTITY_MEMBER;
    }

    @Override
    public UniqueKey<MemberRecord> getPrimaryKey() {
        return Keys.KEY_MEMBER_PRIMARY;
    }

    @Override
    public List<UniqueKey<MemberRecord>> getKeys() {
        return Arrays.<UniqueKey<MemberRecord>>asList(Keys.KEY_MEMBER_PRIMARY);
    }

    @Override
    public Member as(String alias) {
        return new Member(DSL.name(alias), this);
    }

    @Override
    public Member as(Name alias) {
        return new Member(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Member rename(String name) {
        return new Member(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Member rename(Name name) {
        return new Member(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, String, String, String, Byte, Double, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
