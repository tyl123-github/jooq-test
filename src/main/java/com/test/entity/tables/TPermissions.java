/*
 * This file is generated by jOOQ.
 */
package com.test.entity.tables;


import com.test.entity.Indexes;
import com.test.entity.Keys;
import com.test.entity.Test;
import com.test.entity.tables.records.TPermissionsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TPermissions extends TableImpl<TPermissionsRecord> {

    private static final long serialVersionUID = 583773319;

    /**
     * The reference instance of <code>test.t_permissions</code>
     */
    public static final TPermissions T_PERMISSIONS = new TPermissions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TPermissionsRecord> getRecordType() {
        return TPermissionsRecord.class;
    }

    /**
     * The column <code>test.t_permissions.id</code>.
     */
    public final TableField<TPermissionsRecord, String> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>test.t_permissions.permissions_name</code>. 权限名称
     */
    public final TableField<TPermissionsRecord, String> PERMISSIONS_NAME = createField(DSL.name("permissions_name"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "权限名称");

    /**
     * Create a <code>test.t_permissions</code> table reference
     */
    public TPermissions() {
        this(DSL.name("t_permissions"), null);
    }

    /**
     * Create an aliased <code>test.t_permissions</code> table reference
     */
    public TPermissions(String alias) {
        this(DSL.name(alias), T_PERMISSIONS);
    }

    /**
     * Create an aliased <code>test.t_permissions</code> table reference
     */
    public TPermissions(Name alias) {
        this(alias, T_PERMISSIONS);
    }

    private TPermissions(Name alias, Table<TPermissionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private TPermissions(Name alias, Table<TPermissionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TPermissions(Table<O> child, ForeignKey<O, TPermissionsRecord> key) {
        super(child, key, T_PERMISSIONS);
    }

    @Override
    public Schema getSchema() {
        return Test.TEST;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.T_PERMISSIONS_PRIMARY);
    }

    @Override
    public UniqueKey<TPermissionsRecord> getPrimaryKey() {
        return Keys.KEY_T_PERMISSIONS_PRIMARY;
    }

    @Override
    public List<UniqueKey<TPermissionsRecord>> getKeys() {
        return Arrays.<UniqueKey<TPermissionsRecord>>asList(Keys.KEY_T_PERMISSIONS_PRIMARY);
    }

    @Override
    public TPermissions as(String alias) {
        return new TPermissions(DSL.name(alias), this);
    }

    @Override
    public TPermissions as(Name alias) {
        return new TPermissions(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TPermissions rename(String name) {
        return new TPermissions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TPermissions rename(Name name) {
        return new TPermissions(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
